var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API Reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [PackageAnalyzer]","category":"page"},{"location":"api/#PackageAnalyzer.analyze!-Tuple{Any, AbstractVector{var\"#s39\"} where var\"#s39\"<:Tuple{RegistryInstances.PkgEntry, Union{VersionNumber, Symbol}}}","page":"API Reference","title":"PackageAnalyzer.analyze!","text":"analyze!(root, pkg_entries::AbstractVector{<:Tuple{PkgEntry, Union{VersionNumber, Symbol}}}; auth::GitHub.Authorization=github_auth(), sleep=0) -> Vector{Package}\nanalyze!(root, pkg_entries::AbstractVector{<:PkgEntry}; auth::GitHub.Authorization=github_auth(), sleep=0) -> Vector{Package}\n\nAnalyze all packages in the iterable pkg_entries, using threads, cloning them to root if a directory with their uuid does not already exist.  Returns a Vector{Package}.\n\nOptionally, use pairs (PkgEntry, Union{VersionNumber, Symbol}) to specify the version numbers, or pass a keyword argument version. The version number may be a VersionNumber, or :dev, or :stable. When pairs are passed, the keyword argument version will be ignored.\n\nIf the GitHub authentication is non-anonymous and the repository is on GitHub, the list of contributors to the repositories is also collected, after waiting for sleep seconds for each entry (useful to avoid getting rate-limited by GitHub).  See PackageAnalyzer.github_auth to obtain a GitHub authentication.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze!-Tuple{Any, RegistryInstances.PkgEntry}","page":"API Reference","title":"PackageAnalyzer.analyze!","text":"analyze!(root, package::PkgEntry; auth::GitHub.Authorization=github_auth(), version::Union{VersionNumber, Symbol}=:dev) -> Package\n\nAnalyze the package whose entry in the registry is in the dir directory, cloning the package code to joinpath(root, uuid) where uuid is the UUID of the package, if such a directory does not already exist.\n\nIf the GitHub authentication is non-anonymous and the repository is on GitHub, the list of contributors to the repository is also collected, after waiting for sleep seconds.  Only the number of contributors will be shown in the summary. See PackageAnalyzer.github_auth to obtain a GitHub authentication.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze-Tuple{AbstractString}","page":"API Reference","title":"PackageAnalyzer.analyze","text":"analyze(name_or_dir_or_url::AbstractString; repo = \"\", reachable=true, subdir=\"\", registry=general_registry(), auth::GitHub.Authorization=github_auth(), version::AbstractVersion=:dev)\n\nAnalyze the package pointed to by the mandatory argument and return a summary of its properties.\n\nIf name_or_dir_or_url is a valid Julia identifier, it is assumed to be the name of a package available in registry.  The function then uses find_package to find its entry in the registry and analyze its content.\n\nIf name_or_dir_or_url is a filesystem path, analyze the package whose source code is located at name_or_dir_or_url. Optionally repo and reachable a boolean indicating whether or not the package is reachable online, since these can't be inferred from the source code.  The subdir keyword arguments indicates the subdirectory of dir under which the Julia package can be found.\n\nOtherwise, name_or_dir_or_url is assumed to be a URL. The repository is cloned to a temporary directory and analyzed.\n\nIf the GitHub authentication is non-anonymous and the repository is on GitHub, the list of contributors to the repository is also collected.  Only the number of contributors will be shown in the summary.  See PackageAnalyzer.github_auth to obtain a GitHub authentication.\n\nPass the keyword argument version to confgiure which version of the code is analyzed. Options:\n\n:dev to use the latest code in the repository\n:stable to use the latest released version of the code, or\npass a VersionNumber to analyze a particular version of the package.\n\nIf version !== :dev, only the code associated to that version of the package will be downloaded. That means for packages in subdirectories, top-level information (like CI scripts) may be unavailable.\n\nExample\n\nYou can analyze a package just by its name, whether you have it installed locally or not:\n\njulia> analyze(\"Pluto\"; version=v\"0.18.0\")\nPackage Pluto:\n  * repo: https://github.com/fonsp/Pluto.jl.git\n  * uuid: c3e4b0f8-55cb-11ea-2926-15256bba5781\n  * version: 0.18.0\n  * is reachable: true\n  * tree hash: db1306745717d127037c5697436b04cfb9d7b3dd\n  * Julia code in `src`: 8337 lines\n  * Julia code in `test`: 5448 lines (39.5% of `test` + `src`)\n  * documention in `docs`: 0 lines (0.0% of `docs` + `src`)\n  * documention in README: 118 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE\n    * OSI approved: true\n  * has license(s) in Project.toml: MIT\n    * OSI approved: true\n  * has `docs/make.jl`: false\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions\n\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze-Tuple{Any}","page":"API Reference","title":"PackageAnalyzer.analyze","text":"analyze(package::PkgEntry; auth::GitHub.Authorization=github_auth(), sleep=0, version::AbstractVersion=:dev) -> Package\nanalyze(packages::AbstractVector{<:PkgEntry}; auth::GitHub.Authorization=github_auth(), sleep=0, version::AbstractVersion=:dev) -> Vector{Package}\n\nAnalyzes a package or list of packages using the information in their directory in a registry by creating a temporary directory and calling analyze!, cleaning up the temporary directory afterwards.\n\nIf the GitHub authentication is non-anonymous and the repository is on GitHub, the list of contributors to the repository is also collected after waiting for sleep seconds (useful to avoid getting rate-limited by GitHub).  Only the number of contributors will be shown in the summary.  See PackageAnalyzer.github_auth to obtain a GitHub authentication.\n\nExample\n\njulia> analyze(find_package(\"BinaryBuilder\"))\nPackage BinaryBuilder:\n  * repo: https://github.com/JuliaPackaging/BinaryBuilder.jl.git\n  * uuid: 12aac903-9f7c-5d81-afc2-d9565ea332ae\n  * version: dev\n  * is reachable: true\n  * tree hash: 13335f33356c8df9899472634e02552fd6f99ce4\n  * Julia code in `src`: 4994 lines\n  * Julia code in `test`: 1795 lines (26.4% of `test` + `src`)\n  * documention in `docs`: 1129 lines (18.4% of `docs` + `src`)\n  * documention in README: 22 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE.md\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions\n    * Azure Pipelines\n\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze-Tuple{Module}","page":"API Reference","title":"PackageAnalyzer.analyze","text":"analyze(m::Module; kwargs...) -> Package\n\nIf you want to analyze a package which is already loaded in the current session, you can simply call analyze, which uses pkgdir to determine its source code:\n\njulia> using DataFrames\n\njulia> analyze(DataFrames)\nPackage DataFrames:\n  * repo: \n  * uuid: a93c6f00-e57d-5684-b7b6-d8193f3e46c0\n  * version: 0.0.0\n  * is reachable: true\n  * tree hash: db2a9cb664fcea7836da4b414c3278d71dd602d2\n  * Julia code in `src`: 15628 lines\n  * Julia code in `test`: 21089 lines (57.4% of `test` + `src`)\n  * documention in `docs`: 6270 lines (28.6% of `docs` + `src`)\n  * documention in README: 21 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE.md\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze_path!-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"PackageAnalyzer.analyze_path!","text":"analyze_path!(dest::AbstractString, repo::AbstractString; name=\"\", uuid=UUID(UInt128(0)), subdir=\"\", auth=github_auth(), sleep=0, tree_hash=nothing) -> Package\n\nAnalyze the Julia package located at the URL given by repo by cloning it to dest and calling analyze_path(dest). If tree_hash !== nothing, only the code associated to that tree hash is placed into dest. That allows analyzing particular version numbers, but in the case of packages in subdirectories, it also means that top-level information (like CI workflows) is unavailable.\n\nIf the clone fails, it returns a Package with reachable=false. If a name and uuid are provided, these are used to populate the corresponding fields of the Package. If the clone succeeds, the name and uuid are taken instead from the Project.toml in the package itself, and the values passed here are ignored.\n\nIf the GitHub authentication auth is non-anonymous and the repository is on GitHub, the list of contributors to the repository is also collected, after waiting for sleep seconds for each entry.  See PackageAnalyzer.github_auth to obtain a GitHub authentication.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.analyze_path-Tuple{AbstractString}","page":"API Reference","title":"PackageAnalyzer.analyze_path","text":"analyze_path(dir::AbstractString; repo = \"\", reachable=true, subdir=\"\", auth::GitHub.Authorization=github_auth(), sleep=0, only_subdir=false, version=v\"0\") -> Package\n\nAnalyze the package whose source code is located at the local path dir.  If the package's repository is hosted on GitHub and auth is a non-anonymous GitHub authentication, wait for sleep seconds before collecting the list of its contributors.\n\nonly_subdir indicates that while the package's code does live in a subdirectory of the repo, dir points only to that code and we do not have access to the top-level code. We still pass non-empty subdir in this case, to record the fact that the package does indeed live in a subdirectory.\n\nPass version to store the associated version number. Since this call only has access to files on disk, it does not know the associated version number in any registry.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.find_package-Tuple{AbstractString}","page":"API Reference","title":"PackageAnalyzer.find_package","text":"find_package(pkg; registry = general_registry()) -> RegistryEntry\n\nReturns the RegistryEntry for the package pkg. The singular version of find_packages.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.find_packages","page":"API Reference","title":"PackageAnalyzer.find_packages","text":"find_packages(; registry = general_registry()) -> Vector{RegistryEntry}\nfind_packages(names::AbstractString...; registry = general_registry()) -> Vector{RegistryEntry}\nfind_packages(names; registry = general_registry()) -> Vector{RegistryEntry}\n\nFind all packages in the given registry (specified by the registry keyword argument), the General registry by default. Return a vector of RegistryEntry pointing to to the directories of each package in the registry.\n\nPass a list of package names as the first argument to return the paths corresponding to those packages, or individual package names as separate arguments.\n\n\n\n\n\n","category":"function"},{"location":"api/#PackageAnalyzer.general_registry-Tuple{}","page":"API Reference","title":"PackageAnalyzer.general_registry","text":"general_registry() -> RegistryInstance\n\nReturn the RegistryInstance associated to the General registry.\n\n\n\n\n\n","category":"method"},{"location":"api/#PackageAnalyzer.github_auth","page":"API Reference","title":"PackageAnalyzer.github_auth","text":"PackageAnalyzer.github_auth(token::String=\"\")\n\nObtain a GitHub authetication.  Use the token argument if it is non-empty, otherwise use the GITHUB_TOKEN and GITHUB_AUTH environment variables, if set and of length 40.  If all these methods fail, return an anonymous authentication.\n\n\n\n\n\n","category":"function"},{"location":"serialization/#Saving-results","page":"Saving results","title":"Saving results","text":"","category":"section"},{"location":"serialization/","page":"Saving results","title":"Saving results","text":"Since a Vector{Package} is a Tables.jl-compatible row table, one does not need to do anything special to save the results as a table. For example,","category":"page"},{"location":"serialization/","page":"Saving results","title":"Saving results","text":"using DataFrames, Arrow, PackageAnalyzer\nresults = analyze(find_packages(\"DataFrames\", \"Flux\"));\nArrow.write(\"packages.arrow\", results)\nroundtripped_results = DataFrame(Arrow.Table(\"packages.arrow\"))\nrm(\"packages.arrow\") # hide","category":"page"},{"location":"#PackageAnalyzer.jl","page":"Home","title":"PackageAnalyzer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main functionality of the package is the analyze function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer\n\njulia> analyze(\"Flux\")\nPackage Flux:\n  * repo: https://github.com/FluxML/Flux.jl.git\n  * uuid: 587475ba-b771-5e3f-ad9e-33799f191a9c\n  * version: dev\n  * is reachable: true\n  * tree hash: d6a6169b154b554bec101a3d3a63e02b6ac3557d\n  * Julia code in `src`: 5300 lines\n  * Julia code in `test`: 3034 lines (36.4% of `test` + `src`)\n  * documention in `docs`: 1893 lines (26.3% of `docs` + `src`)\n  * documention in README: 15 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE.md\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions\n    * Buildkite","category":"page"},{"location":"","page":"Home","title":"Home","text":"The argument is a string pointing towards a local path or the name of a package in a locally-installed registry (the General registry is checked by default).","category":"page"},{"location":"","page":"Home","title":"Home","text":"NOTE: the Git repository of the package will be cloned, in order to inspect its content.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also pass a PkgEntry from RegistryInstances.jl.  The function find_package gives you the PkgEntry of a package in your local copy of any registry, by default the General registry. find_package is invoked automatically when you pass the name of a package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> analyze(find_package(\"JuMP\"); version=v\"1\")\nPackage JuMP:\n  * repo: https://github.com/jump-dev/JuMP.jl.git\n  * uuid: 4076af6c-e467-56ae-b986-b466b2749572\n  * version: 1.0.0\n  * is reachable: true\n  * tree hash: 936e7ebf6c84f0c0202b83bb22461f4ebc5c9969\n  * Julia code in `src`: 16906 lines\n  * Julia code in `test`: 12777 lines (43.0% of `test` + `src`)\n  * documention in `docs`: 15978 lines (48.6% of `docs` + `src`)\n  * documention in README: 79 lines\n  * has license(s) in file: MPL-2.0\n    * filename: LICENSE.md\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, you can pass in the module itself:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer\n\njulia> analyze(PackageAnalyzer)\nPackage PackageAnalyzer:\n  * repo: \n  * uuid: e713c705-17e4-4cec-abe0-95bf5bf3e10c\n  * version: 0.0.0\n  * is reachable: true\n  * tree hash: 99f489846e107d7dc06081d3ccb930d15590541f\n  * Julia code in `src`: 729 lines\n  * Julia code in `test`: 178 lines (19.6% of `test` + `src`)\n  * documention in `docs`: 267 lines (26.8% of `docs` + `src`)\n  * documention in README: 44 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions","category":"page"},{"location":"","page":"Home","title":"Home","text":"You use the inplace version analyze!, e.g. as analyze!(root, find_package(\"Flux\")) to clone the package to a particular directory root which is not cleaned up afterwards, and likewise can pass a vector of paths instead of a single path employ use a threaded loop to analyze each package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also directly analyze the source code of a package via analyze by passing in the path to it, for example with the pkgdir function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer, DataFrames\n\njulia> analyze(pkgdir(DataFrames))\nPackage DataFrames:\n  * repo: \n  * uuid: a93c6f00-e57d-5684-b7b6-d8193f3e46c0\n  * version: 0.0.0\n  * is reachable: true\n  * tree hash: db2a9cb664fcea7836da4b414c3278d71dd602d2\n  * Julia code in `src`: 15628 lines\n  * Julia code in `test`: 21089 lines (57.4% of `test` + `src`)\n  * documention in `docs`: 6270 lines (28.6% of `docs` + `src`)\n  * documention in README: 21 lines\n  * has license(s) in file: MIT\n    * filename: LICENSE.md\n    * OSI approved: true\n  * has `docs/make.jl`: true\n  * has `test/runtests.jl`: true\n  * has continuous integration: true\n    * GitHub Actions","category":"page"},{"location":"#The-Package-struct","page":"Home","title":"The Package struct","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The returned values from analyze, and analyze! are objects of the type Package, which has the following fields:","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct Package\n    name::String # name of the package\n    uuid::UUID # uuid of the package\n    repo::String # URL of the repository\n    subdir::String # subdirectory of the package in the repo\n    reachable::Bool # can the repository be cloned?\n    docs::Bool # does it have documentation?\n    runtests::Bool # does it have the test/runtests.jl file?\n    github_actions::Bool # does it use GitHub Actions?\n    travis::Bool # does it use Travis CI?\n    appveyor::Bool # does it use AppVeyor?\n    cirrus::Bool # does it use Cirrus CI?\n    circle::Bool # does it use Circle CI?\n    drone::Bool # does it use Drone CI?\n    buildkite::Bool # does it use Buildkite?\n    azure_pipelines::Bool # does it use Azure Pipelines?\n    gitlab_pipeline::Bool # does it use Gitlab Pipeline?\n    license_files::Vector{@NamedTuple{license_filename::String, licenses_found::Vector{String}, license_file_percent_covered::Float64}} # a table of all possible license files\n    licenses_in_project::Vector{String} # any licenses in the `license` key of the Project.toml\n    lines_of_code::Vector{@NamedTuple{directory::String, language::Symbol, sublanguage::Union{Nothing, Symbol}, files::Int, code::Int, comments::Int, blanks::Int}} # table of lines of code\n    contributors::Vector{@NamedTuple{login::Union{String,Missing}, id::Union{Int,Missing}, name::Union{String,Missing}, type::String, contributions::Int}} # table of contributor data\n    tree_hash::String # `git_tree_sha1` hash of the analyzed code\n    version::Union{Symbol, VersionNumber} # the version that was analyzed; either `dev` for the latest release at the time, or a `VersionNumber`.\nend","category":"page"},{"location":"#Analyzing-multiple-packages","page":"Home","title":"Analyzing multiple packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To run the analysis for multiple packages you can either use broadcasting","category":"page"},{"location":"","page":"Home","title":"Home","text":"analyze.(registry_entries)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or use the method analyze(pkg_entries::AbstractVector{<:PkgEntry}) which runs the analysis with multiple threads.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use the function find_packages to find all packages in a given registry:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> result = find_packages(; registry=general_registry());\n\njulia> summary(result)\n\"7213-element Vector{PkgEntry}\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Do not abuse this function! Consider using the in-place function analyze!(root, registry_entries) to avoid re-cloning packages if you might run the analysis more than once.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nCloning all the repos in General will take more than 20 GB of disk space and can take up to a few hours to complete.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use RegistryInstance's reachable_registries() function to find other RegistryInstance objects to use for the registry keyword argument.","category":"page"},{"location":"#License-information","page":"Home","title":"License information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The license_files field of the Package object is a Tables.jl row table containing much more detailed information about any or all files containing licenses, identified by licensecheck via LicenseCheck.jl. For example, RandomProjectionTree.jl is dual licensed under both Apache-2.0 and the MIT license, and provides two separate license files. Interestingly, the README is also identified as containing an Apache-2.0 license; I've filed an issue to see if this is intentional.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer, DataFrames\n\njulia> result = analyze(\"RandomProjectionTree\");\n\njulia> DataFrame(result.license_files)\n3×3 DataFrame\n Row │ license_filename  licenses_found  license_file_percent_covered\n     │ String            Vector{String}  Float64\n─────┼────────────────────────────────────────────────────────────────\n   1 │ LICENSE-APACHE    [\"Apache-2.0\"]                     100.0\n   2 │ LICENSE-MIT       [\"MIT\"]                            100.0\n   3 │ README.md         [\"Apache-2.0\"]                       6.34921","category":"page"},{"location":"","page":"Home","title":"Home","text":"Most packages contain a single file containing a license, and so have a single entry in the table.","category":"page"},{"location":"#Lines-of-code","page":"Home","title":"Lines of code","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The lines_of_code field of the Package object is a Tables.jl row table containing much more detailed information about the lines of code count (thanks to tokei) and can e.g. be passed to a DataFrame for further analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer, DataFrames\n\njulia> result = analyze(pkgdir(DataFrames));\n\njulia> DataFrame(result.lines_of_code)\n15×7 DataFrame\n Row │ directory        language  sublanguage  files  code   comments  blanks \n     │ String           Symbol    Union…       Int64  Int64  Int64     Int64  \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │ test             Julia                     29  17512       359    2264\n   2 │ src              Julia                     31  15809       885    1253\n   3 │ benchmarks       Julia                      4    245        30      50\n   4 │ benchmarks       Shell                      2     15         0       0\n   5 │ docs             Julia                      1     45         6       5\n   6 │ docs             TOML                       1     11         0       1\n   7 │ docs             Markdown                  16      0      3782     662\n   8 │ docs             Markdown  Julia            4     30         3       4\n   9 │ docs             Markdown  Python           1     13         0       1\n  10 │ docs             Markdown  R                1      6         0       0\n  11 │ Project.toml     TOML                       1     51         0       4\n  12 │ README.md        Markdown                   1      0        21      10\n  13 │ NEWS.md          Markdown                   1      0       267      47\n  14 │ LICENSE.md       Markdown                   1      0        22       1\n  15 │ CONTRIBUTING.md  Markdown                   1      0       138      20","category":"page"},{"location":"#Contributors-to-the-repository","page":"Home","title":"Contributors to the repository","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If the package repository is hosted on GitHub and you can use GitHub authentication, the list of contributors is added to the contributors field of the Package object.  This is a table which includes the GitHub username (\"login\") and the GitHub ID (\"id\") for contributors identified as GitHub \"users\", and the \"name\" for contributors identified as \"Anonymous\" contributors, as well as the number of contributions provided by that user to the repository. This is the data returned from the GitHub API, and there may be people for which some of their contributions are marked as from an anonymous user (possibly more than one!) and some of their contributions are associated to their GitHub username.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using PackageAnalyzer, DataFrames\n\njulia> result = analyze(\"DataFrames\");\n\njulia> df = DataFrame(result.contributors);\n\njulia> sort!(df, :contributions, rev=true)\n189×5 DataFrame\n Row │ login                id        name           type       contributions \n     │ String?              Int64?    String?        String     Int64         \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │ johnmyleswhite          22064  missing        User                 431\n   2 │ bkamins               6187170  missing        User                 412\n   3 │ powerdistribution     5247292  missing        User                 232\n   4 │ nalimilan             1120448  missing        User                 223\n   5 │ garborg               2823840  missing        User                 173\n   6 │ quinnj                2896623  missing        User                 104\n   7 │ simonster              470884  missing        User                  87\n   8 │ missing               missing  Harlan Harris  Anonymous             67\n   9 │ cjprybol              3497642  missing        User                  50\n  10 │ alyst                  348591  missing        User                  48\n  11 │ dmbates                371258  missing        User                  47\n  12 │ tshort                 636420  missing        User                  39\n  13 │ doobwa                  79467  missing        User                  32\n  14 │ HarlanH                130809  missing        User                  32\n  15 │ kmsquire               223250  missing        User                  30\n  ⋮  │          ⋮              ⋮            ⋮            ⋮            ⋮","category":"page"},{"location":"#GitHub-authentication","page":"Home","title":"GitHub authentication","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have a GitHub Personal Access Token, you can obtain some extra information about packages whose repository is hosted on GitHub (e.g. the list of contributors).  If you store the token as an environment variable called GITHUB_TOKEN or GITHUB_AUTH, this will be automatically used whenever possible, otherwise you can generate a GitHub authentication with the PackageAnalyzer.github_auth function and pass it to the functions accepting the auth::GitHub.Authorization keyword argument.","category":"page"}]
}
